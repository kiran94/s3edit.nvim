name: main
on:
  push:
    branches:
      - master
      - main
  pull_request:
jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        include:
          - id: Neovim Nightly
            os: ubuntu-20.04
            url: https://github.com/neovim/neovim/releases/download/nightly/nvim-linux64.tar.gz
            manager: sudo apt-get
            packages: -y ripgrep
          - id: Neovim 0.9
            os: ubuntu-20.04
            url: https://github.com/neovim/neovim/releases/download/v0.9.0/nvim-linux64.tar.gz
            manager: sudo apt-get
            packages: -y ripgrep
          - id: Neovim 0.8
            os: ubuntu-20.04
            url: https://github.com/neovim/neovim/releases/download/v0.8.0/nvim-linux64.tar.gz
            manager: sudo apt-get
            packages: -y ripgrep
    steps:
      - uses: actions/checkout@v2
      # - run: date +%F > todays-date
      # - name: Restore from todays cache
      #   uses: actions/cache@v2
      #   with:
      #     path: _neovim
      #     key: ${{ runner.os }}-${{ matrix.url }}-${{ hashFiles('todays-date') }}
      - name: Prepare
        run: |
          ${{ matrix.manager }} update
          ${{ matrix.manager }} install ${{ matrix.packages }}
          test -d _neovim || {
            mkdir -p _neovim
            curl -sL ${{ matrix.url }} | tar xzf - --strip-components=1 -C "${PWD}/_neovim"
          }
          mkdir -p ~/.local/share/nvim/site/pack/vendor/start
          git clone --depth 1 https://github.com/nvim-lua/plenary.nvim ~/.local/share/nvim/site/pack/vendor/start/plenary.nvim
          git clone --depth 1 https://github.com/kyazdani42/nvim-web-devicons ~/.local/share/nvim/site/pack/vendor/start/nvim-web-devicons
          ln -s $(pwd) ~/.local/share/nvim/site/pack/vendor/start
      - name: Run tests
        run: |
          export PATH="${PWD}/_neovim/bin:${PATH}"
          export VIM="${PWD}/_neovim/share/nvim/runtime"
          nvim --version
          make test
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test]
    steps:
      - name: Release
        uses: go-semantic-release/action@v1
        if: github.ref == 'refs/heads/main'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
